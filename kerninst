#!/bin/bash

# Copyright © 2016-2020 Canek Peláez Valdés

# Kerninst is free software: you can redistribute it and/or modify it under the
# terms of the GNU General Public License as published by the Free Software
# Foundation, either version 3 of the License, or (at your option) any later
# version.

# Kerninst is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

# You should have received a copy of the GNU General Public License along with
# kerninst. If not, see <http://www.gnu.org/licenses/>.

# Author:
#  Canek Peláez Valdés <canek@ciencias.unam.mx>

# kerninst: Compile and install a kernel in Gentoo. Also, create and install an
# initrd created with dracut, and configure either Grub or Bootctl to use the
# new kernel and associated initrd.

BASENAME="/usr/bin/basename"
CHMOD="/bin/chmod"
CP="/bin/cp"
DRACUT="/usr/bin/dracut"
ECHO="/bin/echo"
EMERGE="/usr/bin/emerge"
GREP="/bin/grep"
GRUB_MKCONFIG="/usr/sbin/grub-mkconfig"
MAKE="/usr/bin/make"
MKDIR="/bin/mkdir"
MOUNT="/bin/mount"
MOUNTPOINT="/bin/mountpoint"
OBJCOPY="/usr/bin/objcopy"
PRINTF="/usr/bin/printf"
READLINK="/usr/bin/readlink"
RM="/bin/rm"
UMOUNT="/bin/umount"
YES="/bin/yes"

# Pretty messages
. /etc/init.d/functions.sh
# Configuration
. /etc/kerninst/kerninst.conf

# Set the terminal title
function termtitle() {
    "${ECHO}" -ne "\x1b]0;${1}\x07" > /dev/stderr
}

# Print an error and exit
function kerror() {
    termtitle "${1}"
    eerror "${1}"
    exit 1
}

# Print information and exit
function kinfo() {
    termtitle "${1}"
    einfo "${1}"
}

# Log file
LOGFILE="/var/log/kerninst.log"

# Delete old log file
"${RM}" -f "${LOGFILE}"

# Chech for kernel directory symbolic link
if [ ! -L "/usr/src/linux" ]; then
    kerror "The symbolic link /usr/src/linux does not exists."
fi

# Kernel directory
KERNEL_DIR=$("${READLINK}" "/usr/src/linux")
# Machine ID
MACHINE_ID=$(cat "/etc/machine-id")

# Check that the kernel directory is valid
if [ ! -d "/usr/src/${KERNEL_DIR}" ] || [ ! -f "/usr/src/${KERNEL_DIR}/Makefile" ]; then
    if [ ! "${GREP}" -q KBUILD "/usr/src/${KERNEL_DIR}/Makefile" ]; then
        kerror "The file /usr/src/${KERNEL_DIR} is not a valid kernel directory."
    fi
fi

# Get kernel version from symbolic link
KERNEL_VERSION=$("${READLINK}" "/usr/src/linux" | sed "s/^linux-//g")

# Check for a valid kernel version
if [ "${KERNEL_VERSION}" == "" ] || [[ "${KERNEL_VERSION}" =~ \ |\' ]]; then
    kerror "The version ${KERNEL_VERSION} is not a valid kernel version."
fi

# Check for a valid boot manager
if [ "${BOOT_MANAGER}" != "grub" ] && [ "${BOOT_MANAGER}" != "bootctl" ]; then
    kerror "Invalid boot manager."
fi

# Returns the necessary boot subdir, depending on the boot manager
function _bootsubdir() {
    case "${BOOT_MANAGER}" in
        grub)
            "${ECHO}" "/boot/grub"
            ;;
        bootctl)
            "${ECHO}" "/boot/EFI"
            ;;
    esac
}

# Check for a mounted /boot dir, and tries to mount it if specified by the user
function _mount_boot() {
    BOOT_SUBDIR=$(_bootsubdir)
    if [ ! -d "${BOOT_SUBDIR}" ]; then
        if [ "${MOUNT_BOOT}" == "yes" ]; then
            kinfo "Mounting /boot..."
            "${MOUNT}" /boot || die
        fi
    fi
    if [ ! -d "${BOOT_SUBDIR}" ]; then
        kerror "${BOOT_MANAGER^} is not installed or /boot is not mounted."
    fi
}

# Umounts /boot
function _umount_boot() {
    if [ "${MOUNT_BOOT}" == "yes" ]; then
        kinfo "Unmounting /boot..."
        "${UMOUNT}" /boot || die
    fi
}

# die function
function die() {
    kerror "An error ocurred. Exiting."
}

# Copies the kernel configuration to the new kernel, runs oldconfig and compiles
# the kernel
function kernel_compile() {
    kinfo "Copying kernel configuration from ${KERNEL_CONFIG}..."
    "${CP}" -f "${KERNEL_CONFIG}" /usr/src/linux/.config &>> "${LOGFILE}" || die

    kinfo "Configuring kernel..."
    "${YES}" "" | "${MAKE}" -C /usr/src/linux oldconfig &>> "${LOGFILE}" || die

    if [ "${UPDATE_KERNEL_CONFIG}" == "yes" ]; then
        kinfo "Updating kernel config..."
        "${CP}" -f /usr/src/linux/.config "${KERNEL_CONFIG}" || die
    fi

    SYNC_CHECK="/usr/src/linux/tools/objtool/sync-check.sh"
    if [ ! -x ${SYNC_CHECK} ]; then
        kinfo "Making sync-check.sh executable..."
        "${CHMOD}" 755 ${SYNC_CHECK} || die
    fi

    kinfo "Compiling kernel..."
    "${MAKE}" ${KERNEL_MAKEOPTS} -C /usr/src/linux &>> "${LOGFILE}" || die
}

# Deletes the kernel version files in Grub
function _delete_kernel_files_grub() {
    kinfo "Deleting kernel files with version ${KERNEL_VERSION} from /boot..."
    "${RM}" -f "/boot/config-${KERNEL_VERSION}" &>> "${LOGFILE}" || die
    "${RM}" -f "/boot/initrd-${KERNEL_VERSION}" &>> "${LOGFILE}" || die
    "${RM}" -f "/boot/System.map-${KERNEL_VERSION}" &>> "${LOGFILE}" || die
    "${RM}" -f "/boot/vmlinuz-${KERNEL_VERSION}" &>> "${LOGFILE}" || die
}

# Deletes the kernel version files in Bootctl
function _delete_kernel_files_bootctl() {
    kinfo "Deleting kernel files with version ${KERNEL_VERSION} from /boot..."
    "${RM}" -rf "/boot/${MACHINE_ID}/${KERNEL_VERSION}" &>> "${LOGFILE}" || die
    "${RM}" -f "/boot/loader/entries/${MACHINE_ID}-${KERNEL_VERSION}.conf" &>> "${LOGFILE}" || die
}

# Deletes the kernel version files in Bootctl
function _delete_kernel_files_bootctl_unified() {
    kinfo "Deleting kernel files with version ${KERNEL_VERSION} from /boot..."
    EFI_LINUX="/boot/EFI/Linux"
    "${RM}" -rf "${EFI_LINUX}/linux-${KERNEL_VERSION}-${MACHINE_ID}.efi" &>> "${LOGFILE}" || die
}

# Deletes the kernel version modules
function _delete_lib_modules() {
    kinfo "Deleting kernel files with version ${KERNEL_VERSION} from /lib/modules..."
    "${RM}" -rf "/lib/modules/${KERNEL_VERSION}" &>> "${LOGFILE}" || die
}

# Deletes the kernel version files and modules
function _delete_kernel_files() {
    case "${BOOT_MANAGER}" in
        grub)
            _delete_kernel_files_grub
            ;;
        bootctl)
            if [ "${UNIFIED_IMAGE}" == "yes" ]; then
                _delete_kernel_files_bootctl_unified
            else
                _delete_kernel_files_bootctl
            fi
            ;;
    esac
    _delete_lib_modules
}

# Installs the kernel files for Grub
function _kernel_install_grub() {
    kinfo "Installing kernel..."
    "${MAKE}" -C /usr/src/linux install &>> "${LOGFILE}" || die
    kinfo "The kernel was installed into /boot/vmlinuz-${KERNEL_VERSION}."
}

# Installs the kernel files for Bootctl
function _kernel_install_bootctl() {
    LOCATION="/boot/${MACHINE_ID}/${KERNEL_VERSION}/kernel"

    kinfo "Installing kernel..."
    "${MKDIR}" -p "/boot/${MACHINE_ID}/${KERNEL_VERSION}" &>> "${LOGFILE}" || die
    cp "/usr/src/linux/arch/x86/boot/bzImage" "${LOCATION}" &>> "${LOGFILE}" || die
    kinfo "The kernel was installed into ${LOCATION}."
}

# Installs the modules
function _install_modules() {
    kinfo "Installing modules..."
    "${MAKE}" -C /usr/src/linux modules_install &>> "${LOGFILE}" || die
}

# Installs the kernel files and modules
function kernel_install() {
    _delete_kernel_files
    case "${BOOT_MANAGER}" in
        grub)
            _kernel_install_grub
            ;;
        bootctl)
            if [ "${UNIFIED_IMAGE}" != "yes" ]; then
                _kernel_install_bootctl
            fi
            ;;
    esac
    _install_modules
}

# Returns the correct initrd location
function _initrd_location() {
    case "${BOOT_MANAGER}" in
        grub)
            "${ECHO}" "/boot/initrd-${KERNEL_VERSION}"
            ;;
        bootctl)
            if [ "${UNIFIED_IMAGE}" == "yes" ]; then
                "${ECHO}" "/tmp/initrd-${MACHINE_ID}-${KERNEL_VERSION}"
            else
                "${ECHO}" "/boot/${MACHINE_ID}/${KERNEL_VERSION}/initrd"
            fi
            ;;
    esac
}

# Creates the initrd
function make_initrd() {
    if [ "${MODULES_REBUILD}" == "yes" ]; then
        kinfo "Recompiling modules..."
        "${EMERGE}" --nodeps -v "${MODULES_PACKAGES}" &>> "${LOGFILE}" || die
    fi

    LOCATION=$(_initrd_location)

    kinfo "Creating initrd..."
    if [ "${INCLUDES}" != "" ] || [ "${INCLUDE_FIRMWARE}" == "yes" ]; then
        INCLUDED="-I"

        for i in $(find /lib64/firmware -type f); do
            INCLUDED+=" ${i}"
        done

        for i in $("${ECHO}" ${INCLUDES}); do
            INCLUDED+=" ${i}"
        done

        "${DRACUT}" -f "${INCLUDED}" "${LOCATION}" "${KERNEL_VERSION}" &>> "${LOGFILE}" || die
    else
        "${DRACUT}" -f "${LOCATION}" "${KERNEL_VERSION}" &>> "${LOGFILE}" || die
    fi
    kinfo "The initrd was installed into ${LOCATION}."
}

# Updates grub
function _update_bootmanager_grub() {
    kinfo "Updating GRUB..."
    if [ "${MOUNT_BOOT_EFI}" == "yes" ]; then
        kinfo "Mounting EFI boot directory..."
        "${MOUNTPOINT}" -q  /boot/efi || "${MOUNT}" /boot/efi
    fi
    "${GRUB_MKCONFIG}" -o "${GRUB_CONFIG_FILE}" &>> "${LOGFILE}" || die
}

# Updates bootctl
function _update_bootmanager_bootctl() {
    kinfo "Updating Bootctl..."
    if [ "${BOOTCTL_TITLE}" == "" ]; then
        BOOTCTL_TITLE="Linux"
    fi

    ENTRY="/boot/loader/entries/${MACHINE_ID}-${KERNEL_VERSION}.conf"
    KERNEL="/${MACHINE_ID}/${KERNEL_VERSION}/kernel"
    INITRD="/${MACHINE_ID}/${KERNEL_VERSION}/initrd"

    "${PRINTF}" "title        %s\n" "${BOOTCTL_TITLE}"        > ${ENTRY}
    "${PRINTF}" "version      %s\n" "${KERNEL_VERSION}"      >> ${ENTRY}
    "${PRINTF}" "machine-id   %s\n" "${MACHINE_ID}"          >> ${ENTRY}
    "${PRINTF}" "linux        %s\n" "${KERNEL}"              >> ${ENTRY}
    "${PRINTF}" "initrd       %s\n" "${INITRD}"              >> ${ENTRY}
    "${PRINTF}" "options      %s\n" "${KERNEL_COMMAND_LINE}" >> ${ENTRY}
}

# Creates the kernel command line file
function _create_cmdline() {
    CMDP="/tmp/kernel-command-line.txt"
    "${PRINTF}" "%s\n" "${KERNEL_COMMAND_LINE}" > ${CMDP}
    "${ECHO}" "${CMDP}"
}

# Updates bootctl
function _update_bootmanager_bootctl_unified() {
    kinfo "Updating Bootctl unified image..."

    OSREL="/etc/os-release"
    if [ ! -f "${OSREL}" ]; then
        kerror "${OSREL} missing"
    fi
    CMDP=$(_create_cmdline)
    ARCH=$(arch)
    KERNEL="/usr/src/${KERNEL_DIR}/arch/${ARCH}/boot/bzImage"
    INITRD=$(_initrd_location)
    STUB=$(find "/usr/lib/systemd/boot" -name "*.stub")
    EFI_LINUX="/boot/EFI/Linux"
    if [ ! -d "${EFI_LINUX}" ]; then
        "${MKDIR}" -p "${EFI_LINUX}"
    fi
    IMAGE="${EFI_LINUX}/linux-${KERNEL_VERSION}-${MACHINE_ID}.efi"

    OBJPRM=( --add-section   .osrel="${OSREL}"  --change-section-vma   .osrel=0x0020000)
    OBJPRM+=(--add-section .cmdline="${CMDP}"   --change-section-vma .cmdline=0x0030000)
    if [ -f "${SPLASH}" ]; then
        OBJPRM+=(--add-section  .splash="${SPLASH}" --change-section-vma  .splash=0x0040000)
    fi
    OBJPRM+=(--add-section   .linux="${KERNEL}" --change-section-vma   .linux=0x2000000)
    OBJPRM+=(--add-section  .initrd="${INITRD}" --change-section-vma  .initrd=0x3000000)

    kinfo "Creating unified kernel image..."
    "${OBJCOPY}" ${OBJPRM[@]} "${STUB}" "${IMAGE}"
    kinfo "Removing initrd in ${INITRD}..."
    "${RM}" -f "${INITRD}"
    "${RM}" -f "${CMDP}"
    kinfo "The unified kernel image was created in ${IMAGE}."
}

# Updates the boot manager
function update_bootmanager() {
    case "${BOOT_MANAGER}" in
        grub)
            _update_bootmanager_grub
            ;;
        bootctl)
            if [ "${UNIFIED_IMAGE}" == "yes" ]; then
                _update_bootmanager_bootctl_unified
            else
                _update_bootmanager_bootctl
            fi
            ;;
    esac
}

# Get the exec name
EXEC_NAME=$("${BASENAME}" "$0")

# Override configuration file with command line flags
for ARG in "$@"; do
    case "${ARG}" in
        --modules-rebuild)
            MODULES_REBUILD="yes"
            ;;
        --no-modules-rebuild)
            MODULES_REBUILD="no"
            ;;
        --update-kernel-config)
            UPDATE_KERNEL_CONFIG="yes"
            ;;
        --no-update-kernel-config)
            UPDATE_KERNEL_CONFIG="no"
            ;;
    esac
done

# Delete other (not current version) grub files
function _delete_other_files_grub() {
    for FILE in /boot/{config,initrd,System.map,vmlinuz}-*; do
        if [ "${FILE}" == "/boot/config-${KERNEL_VERSION}" ] ||
               [ "${FILE}" == "/boot/initrd-${KERNEL_VERSION}" ] ||
               [ "${FILE}" == "/boot/System.map-${KERNEL_VERSION}" ] ||
               [ "${FILE}" == "/boot/vmlinuz-${KERNEL_VERSION}" ]; then
            continue
        fi
        kinfo "Deleting ${FILE}..."
        "${RM}" -f "${FILE}" &>> "${LOGFILE}" || die
    done
}

# Delete other unified kernel images in bootctl
function _delete_other_files_bootctl_unified() {
    for FILE in /boot/EFI/Linux/*.efi; do
        VERSION=$("${BASENAME}" "${FILE}" | cut -d "-" -f 2- | sed "s/-${MACHINE_ID}\.img//g")
        if [ "${VERSION}" == "${KERNEL_VERSION}" ]; then
            continue
        fi
        kinfo "Deleting ${FILE}..."
        "${RM}" -rf "${FILE}" &>> "${LOGFILE}" || die
    done
}

# Delete other (not current version) bootctl files
function _delete_other_files_bootctl() {
    for DIR in /boot/${MACHINE_ID}/*; do
        if [ "${DIR}" == "/boot/${MACHINE_ID}/${KERNEL_VERSION}" ]; then
            continue
        fi
        kinfo "Deleting ${DIR}..."
        "${RM}" -rf "${DIR}" &>> "${LOGFILE}" || die
    done
    for FILE in /boot/loader/entries/*; do
        if [ "${FILE}" == "/boot/loader/entries/${MACHINE_ID}-${KERNEL_VERSION}.conf" ]; then
            continue
        fi
        kinfo "Deleting ${FILE}..."
        "${RM}" -f "${FILE}" &>> "${LOGFILE}" || die
    done
}

# There is a new kernel configuration
function new_config() {
    if [ ! -f "/usr/src/${KERNEL_DIR}/.config" ]; then
        kerror "No kernel config"
    fi
    "${CP}" -f "/usr/src/${KERNEL_DIR}/.config" "${KERNEL_CONFIG}"
}

# Clean files from other kernel versions
function clean() {
    for DIR in /usr/src/linux-* /lib/modules/*; do
        if [ ! -d "${DIR}" ]; then
            continue
        fi
        if [ "${DIR}" == "/usr/src/${KERNEL_DIR}" ]; then
            continue
        fi
        if [ "${DIR}" == "/lib/modules/${KERNEL_VERSION}" ]; then
            continue
        fi
        kinfo "Deleting ${DIR}..."
        "${RM}" -rf "${DIR}" &>> "${LOGFILE}" || die
    done
    case "${BOOT_MANAGER}" in
        grub)
            _delete_other_files_grub
            ;;
        bootctl)
            if [ "${UNIFIED_IMAGE}" == "yes" ]; then
                _delete_other_files_bootctl_unified
            else
                _delete_other_files_bootctl
            fi
            ;;
    esac
}

# "Main"
case "${EXEC_NAME}" in
    kerninst)
        _mount_boot
        kernel_compile
        kernel_install
        make_initrd
        update_bootmanager
        _umount_boot
        ;;
    kerninst-compile)
        kernel_compile
        ;;
    kerninst-install)
        if [ "${UNIFIED_IMAGE}" == "yes" ]; then
            kerror "Unified kernel image selected; the kernel will not be installed"
        fi
        _mount_boot
        kernel_install
        _umount_boot
        ;;
    kerninst-mkinitrd)
        if [ "${UNIFIED_IMAGE}" == "yes" ]; then
            kerror "Unified kernel image selected; the initrd will not be created"
        fi
        _mount_boot
        make_initrd
        _umount_boot
        ;;
    kerninst-updatebm)
        _mount_boot
        if [ "${UNIFIED_IMAGE}" == "yes" ]; then
            make_initrd
        fi
        update_bootmanager
        _umount_boot
        ;;
    kerninst-newconfig)
        new_config
        ;;
    kerninst-clean)
        _mount_boot
        clean
        _umount_boot
        ;;
    *)
        kerror "Invalid executable name."
        ;;
esac
