#!/bin/bash

. /etc/init.d/functions.sh
. /etc/kerninst/kerninst.conf

LOGFILE=/var/log/kerninst.log

/bin/rm -f "${LOGFILE}"

if [ ! -L /usr/src/linux ]; then
    eerror "The symbolic link /usr/src/linux does not exists."
    exit 1
fi

KERNEL_DIR=$(readlink /usr/src/linux)

if [ ! -d "/usr/src/${KERNEL_DIR}" ] || [ ! -f "/usr/src/${KERNEL_DIR}/Makefile" ]; then
    if [ ! grep -q KBUILD "/usr/src/${KERNEL_DIR}/Makefile" ]; then
        eerror "The file /usr/src/${KERNEL_DIR} is not a valid kernel directory."
        exit 1
    fi
fi

KERNEL_VERSION=$(readlink /usr/src/linux | sed "s/^linux-//g")

if [ "${KERNEL_VERSION}" == "" ] || [[ "${KERNEL_VERSION}" =~ \ |\' ]]; then
    eerror "The version ${KERNEL_VERSION} is not a valid kernel version."
    exit 1
fi

function die() {
    eerror "An error ocurred. Exiting."
    exit 1
}

function kernel_compile() {
    einfo "Copying kernel configuration from ${KERNEL_CONFIG}..."
    /bin/cp -f "${KERNEL_CONFIG}" /usr/src/linux/.config &>> "${LOGFILE}" || die

    einfo "Configuring kernel..."
    /bin/yes "" | make -C /usr/src/linux oldconfig &>> "${LOGFILE}" || die

    if [ "${UPDATE_KERNEL_CONFIG}" == "yes" ]; then
        einfo "Updating kernel config..."
        /bin/cp -f /usr/src/linux/.config "${KERNEL_CONFIG}" || die
    fi

    einfo "Compiling kernel..."
    /usr/bin/make ${KERNEL_MAKEOPTS} -C /usr/src/linux &>> "${LOGFILE}" || die
}

function kernel_install() {
    case "${BOOT_MANAGER}" in
        grub)
            kernel_install_grub
            ;;
        gummiboot)
            kernel_install_gummiboot
            ;;
        *)
            eerror "Invalid boot manager."
            ;;
    esac
}

function _delete_lib_modules() {
    einfo "Deleting kernel files with version ${KERNEL_VERSION} from /lib/modules..."
    /bin/rm -rf "/lib/modules/${KERNEL_VERSION}" &>> "${LOGFILE}" || die
}

function _install_modules() {
    einfo "Installing modules..."
    make -C /usr/src/linux modules_install &>> "${LOGFILE}" || die
}

function kernel_install_grub() {
    einfo "Deleting kernel files with version ${KERNEL_VERSION} from /boot..."
    /bin/rm -f "/boot/config-${KERNEL_VERSION}" &>> "${LOGFILE}" || die
    /bin/rm -f "/boot/initrd-${KERNEL_VERSION}" &>> "${LOGFILE}" || die
    /bin/rm -f "/boot/System.map-${KERNEL_VERSION}" &>> "${LOGFILE}" || die
    /bin/rm -f "/boot/vmlinuz-${KERNEL_VERSION}" &>> "${LOGFILE}" || die
    _delete_lib_modules

    einfo "Installing kernel..."
    make -C /usr/src/linux install &>> "${LOGFILE}" || die
    einfo "The kernel was installed into /boot/vmlinuz-${KERNEL_VERSION}."
}

function kernel_install_gummiboot() {
    MACHINE_ID=$(cat /etc/machine-id)
    einfo "Deleting kernel files with version ${KERNEL_VERSION} from /boot..."
    /bin/rm -rf "/boot/${MACHINE_ID}/${KERNEL_VERSION}" &>> "${LOGFILE}" || die
    /bin/rm -f \
        "/boot/loader/entries/${MACHINE_ID}-${KERNEL_VERSION}.conf" &>> "${LOGFILE}" || die
    _delete_lib_modules

    LOCATION="/boot/${MACHINE_ID}/${KERNEL_VERSION}/kernel"

    einfo "Installing kernel..."
    /bin/mkdir -p "/boot/${MACHINE_ID}/${KERNEL_VERSION}" &>> "${LOGFILE}" || die
    cp "/usr/src/linux/arch/x86/boot/bzImage" "${LOCATION}" &>> "${LOGFILE}" || die
    einfo "The kernel was installed into ${LOCATION}."
}

function _initrd_location() {
    case "${BOOT_MANAGER}" in
        grub)
            echo "/boot/initrd-${KERNEL_VERSION} ${KERNEL_VERSION}"
            ;;
        gummiboot)
            echo "/boot/${MACHINE_ID}/${KERNEL_VERSION}/initrd"
            ;;
        *)
            eerror "Invalid boot manager."
            ;;
    esac
}

function make_initrd() {
    if [ "${MODULES_REBUILD}" == "yes" ]; then
        einfo "Recompiling modules..."
        /usr/bin/emerge -v @module-rebuild &>> "${LOGFILE}" || die
    fi

    LOCATION=$(_initrd_location)

    einfo "Creating initrd..."
    if [ "${INCLUDES}" != "" ] || [ "${INCLUDE_FIRMWARE}" == "yes" ]; then
        INCLUDED="-I"

        for i in $(find /lib64/firmware -type f); do
            INCLUDED+=" ${i}"
        done

        for i in $(echo ${INCLUDES}); do
            INCLUDED+=" ${i}"
        done

        /usr/bin/dracut -f "${INCLUDED}" "${LOCATION}" &>> "${LOGFILE}" || die
    else
        /usr/bin/dracut -f "${LOCATION}" &>> "${LOGFILE}" || die
    fi
    einfo "The initrd was installed into ${LOCATION}."
}

function update_bootmanager_grub2() {
    einfo "Updating GRUB2..."
    /usr/sbin/grub2-mkconfig -o "${GRUB2_CONFIG_FILE}" &>> "${LOGFILE}" || die
}

function update_bootmanager_gummiboot() {
    einfo "Updating Gummiboot..."
    if [ "${GUMMIBOOT_TITLE}" == "" ]; then
        GUMMIBOOT_TITLE="Linux"
    fi

    ENTRY="/boot/loader/entries/${MACHINE_ID}-${KERNEL_VERSION}.conf"
    KERNEL="/${MACHINE_ID}/${KERNEL_VERSION}/kernel"
    INITRD="/${MACHINE_ID}/${KERNEL_VERSION}/initrd"

    /usr/bin/printf "title\t\t%s\n" "${GUMMIBOOT_TITLE}"        > ${ENTRY}
    /usr/bin/printf "version\t\t%s\n" "${KERNEL_VERSION}"      >> ${ENTRY}
    /usr/bin/printf "machine-id\t%s\n" "${MACHINE_ID}"         >> ${ENTRY}
    /usr/bin/printf "linux\t\t%s\n" "${KERNEL}"                >> ${ENTRY}
    /usr/bin/printf "initrd\t\t%s\n" "${INITRD}"               >> ${ENTRY}
    /usr/bin/printf "options\t\t%s\n" "${KERNEL_COMMAND_LINE}" >> ${ENTRY}
    /usr/bin/printf "splash\t\t%s\n" "${GUMMIBOOT_SPLASH}"     >> ${ENTRY}
}

function update_bootmanager() {
    case "${BOOT_MANAGER}" in
        grub)
            update_bootmanager_grub2
            ;;
        gummiboot)
            update_bootmanager_gummiboot
            ;;
        *)
            eerror "Invalid boot manager."
            ;;
    esac
}

EXEC_NAME=$(/usr/bin/basename "$0")

for ARG in "$@"; do
    case "${ARG}" in
        --modules-rebuild)
            MODULES_REBUILD="yes"
            ;;
        --no-modules-rebuild)
            MODULES_REBUILD="no"
            ;;
        --update-kernel-config)
            UPDATE_KERNEL_CONFIG="yes"
            ;;
        --no-update-kernel-config)
            UPDATE_KERNEL_CONFIG="no"
            ;;
    esac
done

case "${EXEC_NAME}" in
    kerninst)
        kernel_compile
        kernel_install
        make_initrd
        update_bootmanager
        ;;
    kerninst-compile)
        kernel_compile
        ;;
    kerninst-install)
        kernel_install
        ;;
    kerninst-mkinitrd)
        make_initrd
        ;;
    kerninst-updatebm)
        update_bootmanager
        ;;
    *)
        eerror "Invalid executable name."
        ;;
esac
